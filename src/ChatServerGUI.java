import java.awt.Dimension;
import java.awt.Rectangle;
import java.util.HashMap;

import eu.telecomlille.sdl.IProcess;
import eu.telecomlille.sdl.ISignal;
import eu.telecomlille.sdl.Stepper;
import eu.telecomlille.sdl.tcp.TCPLayer;
import eu.telecomlille.sdlchat.server.ChatServer;
import eu.telecomlille.sdlchat.server.TCPServer;
import eu.telecomlille.sdlchat.signals.ConnectedUI;
import eu.telecomlille.sdlchat.signals.DisconnectUI;
import eu.telecomlille.sdlchat.signals.DisconnectedUI;
import eu.telecomlille.sdlchat.signals.ListenUI;

/**
 * A ChatServer GUI.
 * 
 * @author C. TOMBELLE
 */
public class ChatServerGUI extends javax.swing.JFrame implements IProcess {
	private static final long serialVersionUID = 9050725683083146683L;
	private ChatServer _chatServer;
	private javax.swing.JButton _btnDisc;
	private javax.swing.JLabel _jlblLeft;
	private javax.swing.JLabel _jlblMembersList;
	private javax.swing.JLabel _jlblRight;
	private javax.swing.JMenuBar _jmbStd;
	private javax.swing.JMenuItem _jmiExit;
	private javax.swing.JMenu _jmnFile;
	private javax.swing.JPanel _jpnlMain;
	private javax.swing.JPanel _jpnlStatus;
	private javax.swing.JToolBar _jtlbStd;
	private java.awt.List _lstMembers;
	private HashMap<String, IProcess> _hmMembers;

	/** Creates an instance of ChatServerGUI. */
	public ChatServerGUI() {
		initComponents();
		_hmMembers = new HashMap<String, IProcess>();
		// Create the ChatServer
		_chatServer = new ChatServer();
		_chatServer.setEnv(this);
		// start ChatSerrver
		_chatServer.setParent(null, null);
		
		// Create the TCPServer
		TCPServer serv = new TCPServer(_chatServer);
		TCPLayer tcp = new TCPLayer();
		tcp.setParent(null, null);
		serv.setRTCP(tcp);
		// start TCPServer
		serv.setParent(null, null);
		// let TCPServer listen to port 13 (could be done by a user action from this GUI)
		serv.add(new ListenUI(this, "localhost", 13455));

//		Toolkit tk = Toolkit.getDefaultToolkit();
//		Dimension dimScreen = tk.getScreenSize();
//		setMaximizedBounds(new Rectangle(dimScreen));
//		setExtendedState(MAXIMIZED_BOTH);
		setBounds(new Rectangle(new Dimension(400, 320)));
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	private void initComponents() {
		_jtlbStd = new javax.swing.JToolBar();
		_btnDisc = new javax.swing.JButton();
		_jpnlMain = new javax.swing.JPanel();
		_lstMembers = new java.awt.List();
		_jlblMembersList = new javax.swing.JLabel();
		_jpnlStatus = new javax.swing.JPanel();
		_jlblLeft = new javax.swing.JLabel();
		_jlblRight = new javax.swing.JLabel();
		_jmbStd = new javax.swing.JMenuBar();
		_jmnFile = new javax.swing.JMenu();
		_jmiExit = new javax.swing.JMenuItem();
		setTitle("Chat Server");
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowClosing(java.awt.event.WindowEvent evt) {
				exitForm(evt);
			}
		});

		_btnDisc.setText("Disconnect");
		_btnDisc.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				discActionPerformed(evt);
			}
		});
		_jtlbStd.add(_btnDisc);

		getContentPane().add(_jtlbStd, java.awt.BorderLayout.NORTH);
		_jpnlMain.setLayout(null);
		_jpnlMain.add(_lstMembers);
		_lstMembers.setBounds(90, 20, 270, 190);
		_jlblMembersList.setText("Connected members are :");
		_jpnlMain.add(_jlblMembersList);
		_jlblMembersList.setBounds(100, 0, 170, 16);
		getContentPane().add(_jpnlMain, java.awt.BorderLayout.CENTER);
		_jpnlStatus.setLayout(new java.awt.GridLayout());
		_jlblLeft.setText("Ready.");
		_jpnlStatus.add(_jlblLeft);
		_jpnlStatus.add(_jlblRight);
		getContentPane().add(_jpnlStatus, java.awt.BorderLayout.SOUTH);
		_jmnFile.setText("File");
		_jmiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(
				java.awt.event.KeyEvent.VK_X,
				java.awt.event.InputEvent.ALT_MASK));
		_jmiExit.setText("Exit");
		_jmiExit.setToolTipText("Exit the application.");
		_jmiExit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				exitActionPerformed(evt);
			}
		});
		_jmnFile.add(_jmiExit);
		_jmbStd.add(_jmnFile);
		setJMenuBar(_jmbStd);
		pack();
	}

	/**
	 * Disconnect button action performed event handling.
	 */
	private void discActionPerformed(java.awt.event.ActionEvent evt) {
		String strMember = _lstMembers.getSelectedItem();
		IProcess pidMember = getMember(strMember);
		if (pidMember != null)
			_chatServer.add(new DisconnectUI(this, pidMember));
		else
			System.out.println(strMember+" non trouvé");
	}

	/**
	 * Normal application exit operation.
	 */
	private void normalExit() {
		System.exit(0);
	}

	/**
	 * File / Exit event.
	 */
	private void exitActionPerformed(java.awt.event.ActionEvent evt) {
		normalExit();
	}

	/** Exit the Application */
	private void exitForm(java.awt.event.WindowEvent evt) {
		normalExit();
	}

	/**
	 * Called when a signal is received.
	 * 
	 * @param sig
	 *            the received signal
	 */
	public void add(ISignal sig) {
		// Make the signal visible in the GUI.
		if (sig instanceof ConnectedUI) {
			ConnectedUI cui = (ConnectedUI) sig;
			addMember(cui.p1);
		} else if (sig instanceof DisconnectedUI) {
			System.out.println(sig);
			DisconnectedUI dui = (DisconnectedUI) sig;
			try {
				removeMember(dui.p1);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	protected void addMember(IProcess pidProc) {
		String strProc = pidProc.toString();
		_hmMembers.put(strProc, pidProc);
		_lstMembers.add(strProc);
	}

	protected IProcess getMember(String strProc) {
		return _hmMembers.get(strProc);
	}

	protected void removeMember(IProcess pidProc) {
		String strProc = pidProc.toString();
		synchronized (_lstMembers) {
			_lstMembers.remove(strProc);
		}
		_hmMembers.remove(strProc);
	}
	
	/**
	 * When a process is created at runtime its PARENT is not null.
	 * 
	 * @param procParent
	 *            the parent PROCESS.
	 */
	public void setParent(IProcess procParent, Stepper s) {
	}

	/**
	 * Run the ChatServer application with its GUI.
	 * 
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {
		new ChatServerGUI().setVisible(true);
	}
}
